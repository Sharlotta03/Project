import telebot
import sqlite3
import requests
import base64
import uuid
from io import BytesIO
from telebot import types
import pandas as pd
from datetime import datetime
from yookassa import Configuration


Configuration.account_id = "494827"
Configuration.secret_key = "test_2gNRcPISYGzkhl9uWBq2R-VIaP6YLuOBQULNIsEQiKM"
REDIRECT_URL = 'https://yourwebsite.com/payment_success'  # URL –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã

auth_string = f"{Configuration.account_id}:{Configuration.secret_key}"
auth_base64 = base64.b64encode(auth_string.encode('utf-8')).decode('utf-8')
idempotence_key = str(uuid.uuid4())

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è API –ÆKassa
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Basic {auth_base64}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
}

# –ü–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç FatherBot
bot = telebot.TeleBot("7961802459:AAEQp7XwPCdbTEyKmdXxF-cTrxWsiqn_QKI")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
user_orders = {}

#----------------------------------------tg-bot---------------------------------------

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BaleMiscStore, {message.from_user.first_name}! üëã\n\n"
                                      "üõí –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–µ!\n"
                                      "üõçÔ∏è –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –Ω—É–∂–¥—ã.\n\n"
                                      "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
                                      "–ù–∞—à —Å–∞–π—Ç: https://sharlotta03.github.io/Project/"
                                      "–ú—ã —Ç–∞–∫–∂–µ —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏: @review_balemicsstore_bot.\n"
                                      "–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤–∞—à –æ–ø—ã—Ç: https://t.me/review_balemicsstore\n\n"
                                      "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –±–æ—Ç –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @BMS_support_bot")
    choose_category(message)
    user_orders[message.chat.id] = {}

@bot.message_handler(commands=['catalog'])
def seng_catalog(message):
    choose_category(message)


@bot.message_handler(commands=['contact'])
def contact(message):
    username = 'BMS_support_bot'
    contact_link = f"tg://resolve?domain={username}"

    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url=contact_link)
    markup.add(button)

    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:", reply_markup=markup)


@bot.message_handler(commands=["help"])
def help(message):
    bot.send_message(message.chat.id, "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –≤ BaleMicsStore</b>\n\n"
                                      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω.\n\n"
                                      "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                                      "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                                      "/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.\n"
                                      "/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
                                      "üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
                                      "–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
                                      "üí¨ <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
                                      "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @BMS_support_bot\n"
                                      "- –ú—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 9:00 –¥–æ 18:00.\n\n"
                                      "üìû <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>\n"
                                      "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–∞–º! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @BMS_support_bot",
                     parse_mode="html")


def choose_category(message):
    markup = types.InlineKeyboardMarkup()
    categories = ['lipsticks', 'eyeshadow', 'eyeliner', 'concealer', 'foundation', 'mascara', 'powder']

    for category_name in categories:
        button = types.InlineKeyboardButton(text=category_name.capitalize(), callback_data=f"category_{category_name}")
        markup.add(button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def handle_category_selection(call):
    category_name = call.data.split('_')[1]
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT name, price, stock_quantity FROM {category_name}")
    products = cursor.fetchall()

    if products:
        product_list = '\n'.join([f"{name} - {price} —Ä—É–±." for name, price, stock_quantity in products])
        message = (f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name.capitalize()}:\n\n"
                   f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:")

        markup = types.InlineKeyboardMarkup()
        for name, price, stock_quantity in products:
            button_text = f"{name} - {price} —Ä—É–±."
            button = types.InlineKeyboardButton(text=button_text, callback_data=f"product_{name}_{category_name}")
            markup.add(button)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        back_button = types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–æ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_categories")
        markup.add(back_button)

        bot.send_message(call.message.chat.id, message, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name.capitalize()} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.')

    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_categories")
def back_to_categories(call):
    choose_category(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
def handle_product_selection(call):
    product_name, category_name = call.data.split('_')[1:]
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT price, description, image_path, stock_quantity FROM {category_name} WHERE name = ?",
                   (product_name,))
    product = cursor.fetchone()

    if product:
        price, description, image_path, stock_quantity = product
        if stock_quantity > 0:
            message = (f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}</b>\n"
                       f"<b>–¶–µ–Ω–∞: {price} —Ä—É–±.</b>\n"
                       f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}")

            if image_path:
                photo = BytesIO(image_path)
                markup = types.InlineKeyboardMarkup()
                pay_button = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"pay_{product_name}_{price}")

                # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–æ–≤–∞—Ä–∞–º —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                         callback_data=f"back_to_category_{category_name}")
                markup.add(pay_button, back_button)

                bot.send_photo(call.message.chat.id, photo, caption=message, reply_markup=markup, parse_mode="HTML")
            else:
                bot.send_message(call.message.chat.id, message)
        else:
            bot.send_message(call.message.chat.id, f"–û–π, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä {product_name} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. üòî –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–º –∑–∞–ø–∞—Å—ã! –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? üõçÔ∏è")
    else:
        bot.send_message(call.message.chat.id, f"–¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_category_'))
def handle_back_to_category(call):
    category_name = call.data.split('_')[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT name, price, stock_quantity FROM {category_name}")
    products = cursor.fetchall()

    if products:
        product_list = '\n'.join([f"{name} - {price} —Ä—É–±." for name, price, stock_quantity in products])
        message = (f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name.capitalize()}:\n\n"
                   f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:")

        markup = types.InlineKeyboardMarkup()
        for name, price, stock_quantity in products:
            button_text = f"{name} - {price} —Ä—É–±."
            button = types.InlineKeyboardButton(text=button_text, callback_data=f"product_{name}_{category_name}")
            markup.add(button)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
        back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back_to_category_{category_name}")
        markup.add(back_button)

        bot.send_message(call.message.chat.id, message, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name.capitalize()} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.')

    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def handle_order(call):
    product_name = call.data.split('_')[1]
    price = call.data.split('_')[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ –ø–∞–º—è—Ç–∏
    user_orders[call.message.chat.id] = {
        'product_name': product_name,
        'price': price
    }

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(call.message.chat.id,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                     parse_mode="html")


@bot.message_handler(func=lambda message: message.chat.id in user_orders and 'user_name' not in user_orders[message.chat.id])
def get_user_name(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–º—è –Ω–µ –±—ã–ª–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    if 'user_name' not in user_orders[message.chat.id]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä—É—á–Ω—É—é
        user_orders[message.chat.id]['user_name'] = message.text.strip()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    bot.send_message(message.chat.id,
                     "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n",
                     parse_mode="html")

#---------------------------------------------------payment-----------------------------------------------------------

# –ö–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def process_payment(call):
    try:
        # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        account_id = "494827"
        secret_key = "test_2gNRcPISYGzkhl9uWBq2R-VIaP6YLuOBQULNIsEQiKM"

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        credentials = f"{account_id}:{secret_key}".encode("utf-8")
        encoded_credentials = base64.b64encode(credentials).decode("utf-8")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Idempotence-Key
        idempotence_key = str(uuid.uuid4())

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Basic {encoded_credentials}",
            "Idempotence-Key": idempotence_key
        }

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å—É–º–º–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ—á–∫–æ–π)
        payment_data = {
            "amount": {
                "value": str(price),  # –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö
                "currency": "RUB"
            },
            "capture": True,
            "confirmation": {
                "type": "redirect",
                "return_url": "https://yourwebsite.com/payment_success"  # –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            },
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        response = requests.post(
            "https://api.yookassa.ru/v3/payments",
            json=payment_data,
            headers=headers
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            confirmation_url = response.json()["confirmation"]["confirmation_url"]
            bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {confirmation_url}")
        else:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {response.json()}")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.chat.id in user_orders and 'delivery_address' not in user_orders[message.chat.id])
def get_delivery_address(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
    delivery_address = message.text.strip()
    user_orders[message.chat.id]['delivery_address'] = delivery_address

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_orders
    user_id = message.chat.id
    user_name = user_orders[user_id]['user_name']  # –ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª
    product_name = user_orders[user_id]['product_name']
    price = user_orders[user_id]['price']
    order_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    save_order_to_excel(user_id, user_name, product_name, price, order_date, delivery_address)
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    payment_link = generate_payment_link(price, user_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, f"–í–∞—à –∑–∞–∫–∞–∑ –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                                          f"üì¶ –¢–æ–≤–∞—Ä: <b>{product_name}</b>\n"
                                          f"üí∞ –¶–µ–Ω–∞: <b>{price} —Ä—É–±.</b>\n"
                                          f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{delivery_address}</b>\n\n"
                                          f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_link}\n\n"
                                          f"–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @BMS_support_bot  ",
                                          parse_mode="html")

def generate_payment_link(price, order_id):
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
        account_id = "494827"
        secret_key = "test_2gNRcPISYGzkhl9uWBq2R-VIaP6YLuOBQULNIsEQiKM"

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        credentials = f"{account_id}:{secret_key}".encode("utf-8")
        encoded_credentials = base64.b64encode(credentials).decode("utf-8")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Idempotence-Key
        idempotence_key = str(uuid.uuid4())

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Basic {encoded_credentials}",
            "Idempotence-Key": idempotence_key
        }

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            "amount": {
                "value": str(price),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —Å—Ç—Ä–æ–∫—É
                "currency": "RUB"
            },
            "capture": True,
            "confirmation": {
                "type": "redirect",
                "return_url": "https://yourwebsite.com/payment_success"  # –£–∫–∞–∂–∏—Ç–µ URL –≤–æ–∑–≤—Ä–∞—Ç–∞
            },
            "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}",
            "metadata": {
                "order_id": order_id  # –î–æ–±–∞–≤–ª—è–µ–º order_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            }
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        response = requests.post(
            "https://api.yookassa.ru/v3/payments",
            json=payment_data,
            headers=headers
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            confirmation_url = response.json()["confirmation"]["confirmation_url"]
            return confirmation_url
        else:
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

#----------------------------------excel-----------------------------------------

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def save_order_to_excel(user_id, user_name, product_name, price, order_date, delivery_address):
    file_path = "orders.xlsx"
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª Excel
        df = pd.read_excel(file_path)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame
        df = pd.DataFrame(columns=["User ID", "User Name", "Product Name", "Price", "Order Date", "Delivery Address"])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    new_order = pd.DataFrame([[user_id, user_name, product_name, price, order_date, delivery_address]],
                             columns=["User ID", "User Name", "Product Name", "Price", "Order Date", "Delivery Address"])
    df = pd.concat([df, new_order], ignore_index=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel
    df.to_excel(file_path, index=False)

bot.polling(none_stop=True)
